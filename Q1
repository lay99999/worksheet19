class Graph:
    def __init__(self):
        self.graph = {}  # To store the members and their relationships

    def add_member(self, name, **info):
        self.graph[name] = {'info': info, 'friends': set()}  # Add member with additional info

    def add_relationship(self, member1, member2):
        if member1 in self.graph and member2 in self.graph:
            self.graph[member1]['friends'].add(member2)
            self.graph[member2]['friends'].add(member1)

    def find_friends(self, member):
        if member in self.graph:
            return list(self.graph[member]['friends'])
        else:
            return "Member not found."
    
    def shortest_path(self, start, end, path=[]): # Return the number of steps in the shortest path from the start to the end node
       if start not in self.graph or end not in self.graph: # If start node or end node not in the graph
           return None
       path = path + [start] # path is the list of all nodes on the path from the start node to the end node
       if start == end:
           return 0
       shortest = None
       for node in self.graph[start]['friends']:
           if node not in path:
               new_shortest = self.shortest_path(node, end, path)
               if new_shortest is not None:
                   new_shortest += 1  
                   if shortest is None or new_shortest < shortest:
                       shortest = new_shortest
       return shortest

network = Graph()
network.add_member("Alice", age=25, location="New York")
network.add_member("Bob", age=30, location="Los Angeles")
network.add_member("Charlie", age=35, location="Chicago")
network.add_member("David", age=40, location="Seattle")
network.add_relationship("Alice", "Bob")
network.add_relationship("Bob", "Charlie")
network.add_relationship("Charlie", "David")
Bob_friends = network.find_friends("Bob")
print(Bob_friends)  
shortest_path_length = network.shortest_path("Alice", "David")
print(shortest_path_length)
